[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "include_docs_urls",
        "importPath": "rest_framework.documentation",
        "description": "rest_framework.documentation",
        "isExtraImport": true,
        "detail": "rest_framework.documentation",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "rest_framework.schemas",
        "description": "rest_framework.schemas",
        "isExtraImport": true,
        "detail": "rest_framework.schemas",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "NewUser",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "NewUser",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "TextInput",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "Textarea",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0001_initial",
        "description": "blog.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "blog.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0002_initial",
        "description": "blog.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('blog', '0001_initial'),\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='post',\n            name='author',",
        "detail": "blog.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "AuthorAdmin",
        "kind": 6,
        "importPath": "blog.admin",
        "description": "blog.admin",
        "peekOfCode": "class AuthorAdmin(admin.ModelAdmin):\n    list_display = (\"title\", \"id\", \"status\", \"slug\", \"author\")\n    prepopulated_fields = {\n        \"slug\": (\"title\",),\n    }\nadmin.site.register(models.Category)",
        "detail": "blog.admin",
        "documentation": {}
    },
    {
        "label": "BlogConfig",
        "kind": 6,
        "importPath": "blog.apps",
        "description": "blog.apps",
        "peekOfCode": "class BlogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blog'",
        "detail": "blog.apps",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=100)\n    def __str__(self):\n        return self.name\nclass Post(models.Model):\n    class PostObjects(models.Manager):\n        def get_queryset(self):\n            return super().get_queryset().filter(status=\"published\")\n    options = (\n        (\"draft\", \"Draft\"),",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class Post(models.Model):\n    class PostObjects(models.Manager):\n        def get_queryset(self):\n            return super().get_queryset().filter(status=\"published\")\n    options = (\n        (\"draft\", \"Draft\"),\n        (\"published\", \"Published\"),\n    )\n    category = models.ForeignKey(Category, on_delete=models.PROTECT, default=1)\n    title = models.CharField(max_length=250)",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Test_Create_Post",
        "kind": 6,
        "importPath": "blog.tests",
        "description": "blog.tests",
        "peekOfCode": "class Test_Create_Post(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        test_category = Category.objects.create(name=\"django\")\n        testuser1 = User.objects.create_user(\n            username=\"test_user1\", password=\"123456789\"\n        )\n        test_post = Post.objects.create(\n            category_id=1,\n            title=\"Post Title\",",
        "detail": "blog.tests",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "blog.urls",
        "description": "blog.urls",
        "peekOfCode": "app_name = \"blog\"\nurlpatterns = [\n    path(\"\", TemplateView.as_view(template_name=\"blog/index.html\")),\n]",
        "detail": "blog.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "blog.urls",
        "description": "blog.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", TemplateView.as_view(template_name=\"blog/index.html\")),\n]",
        "detail": "blog.urls",
        "documentation": {}
    },
    {
        "label": "BlogApiConfig",
        "kind": 6,
        "importPath": "blog_api.apps",
        "description": "blog_api.apps",
        "peekOfCode": "class BlogApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blog_api'",
        "detail": "blog_api.apps",
        "documentation": {}
    },
    {
        "label": "PostSerializer",
        "kind": 6,
        "importPath": "blog_api.serializers",
        "description": "blog_api.serializers",
        "peekOfCode": "class PostSerializer(serializers.ModelSerializer):\n    class Meta:\n        fields = (\"id\", \"title\", \"author\", \"slug\", \"excerpt\", \"content\", \"status\")\n        model = Post",
        "detail": "blog_api.serializers",
        "documentation": {}
    },
    {
        "label": "PostTests",
        "kind": 6,
        "importPath": "blog_api.tests",
        "description": "blog_api.tests",
        "peekOfCode": "class PostTests(APITestCase):\n    def test_view_posts(self):\n        \"\"\"\n        Ensure we can view all objects.\n        \"\"\"\n        url = reverse(\"blog_api:listcreate\")\n        response = self.client.get(url, format=\"json\")\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n    def test_create_post(self):\n        \"\"\"",
        "detail": "blog_api.tests",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "blog_api.urls",
        "description": "blog_api.urls",
        "peekOfCode": "app_name = \"blog_api\"\nurlpatterns = [\n    path(\"\", PostList.as_view(), name=\"listpost\"),\n    path(\"post/<str:pk>/\", PostDetail.as_view(), name=\"detailpost\"),\n    path(\"search/\", PostListDetailfilter.as_view(), name=\"searchpost\"),\n    # Post Admin URLs\n    path(\"admin/create/\", CreatePost.as_view(), name=\"createpost\"),\n    path(\n        \"admin/edit/postdetail/<int:pk>/\",\n        AdminPostDetail.as_view(),",
        "detail": "blog_api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "blog_api.urls",
        "description": "blog_api.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", PostList.as_view(), name=\"listpost\"),\n    path(\"post/<str:pk>/\", PostDetail.as_view(), name=\"detailpost\"),\n    path(\"search/\", PostListDetailfilter.as_view(), name=\"searchpost\"),\n    # Post Admin URLs\n    path(\"admin/create/\", CreatePost.as_view(), name=\"createpost\"),\n    path(\n        \"admin/edit/postdetail/<int:pk>/\",\n        AdminPostDetail.as_view(),\n        name=\"admindetailpost\",",
        "detail": "blog_api.urls",
        "documentation": {}
    },
    {
        "label": "PostList",
        "kind": 6,
        "importPath": "blog_api.views",
        "description": "blog_api.views",
        "peekOfCode": "class PostList(generics.ListAPIView):\n    serializer_class = PostSerializer\n    queryset = Post.objects.all()\nclass PostDetail(generics.RetrieveAPIView):\n    serializer_class = PostSerializer\n    def get_object(self, queryset=None, **kwargs):\n        item = self.kwargs.get(\"pk\")\n        return get_object_or_404(Post, slug=item)\n# Post Search\nclass PostListDetailfilter(generics.ListAPIView):",
        "detail": "blog_api.views",
        "documentation": {}
    },
    {
        "label": "PostDetail",
        "kind": 6,
        "importPath": "blog_api.views",
        "description": "blog_api.views",
        "peekOfCode": "class PostDetail(generics.RetrieveAPIView):\n    serializer_class = PostSerializer\n    def get_object(self, queryset=None, **kwargs):\n        item = self.kwargs.get(\"pk\")\n        return get_object_or_404(Post, slug=item)\n# Post Search\nclass PostListDetailfilter(generics.ListAPIView):\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\n    filter_backends = [filters.SearchFilter]",
        "detail": "blog_api.views",
        "documentation": {}
    },
    {
        "label": "PostListDetailfilter",
        "kind": 6,
        "importPath": "blog_api.views",
        "description": "blog_api.views",
        "peekOfCode": "class PostListDetailfilter(generics.ListAPIView):\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\n    filter_backends = [filters.SearchFilter]\n    # '^' Starts-with search.\n    # '=' Exact matches.\n    search_fields = [\"^slug\"]\n# Post Admin\nclass CreatePost(generics.CreateAPIView):\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "blog_api.views",
        "documentation": {}
    },
    {
        "label": "CreatePost",
        "kind": 6,
        "importPath": "blog_api.views",
        "description": "blog_api.views",
        "peekOfCode": "class CreatePost(generics.CreateAPIView):\n    permission_classes = [permissions.IsAuthenticated]\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\nclass AdminPostDetail(generics.RetrieveAPIView):\n    permission_classes = [permissions.IsAuthenticated]\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\nclass EditPost(generics.UpdateAPIView):\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "blog_api.views",
        "documentation": {}
    },
    {
        "label": "AdminPostDetail",
        "kind": 6,
        "importPath": "blog_api.views",
        "description": "blog_api.views",
        "peekOfCode": "class AdminPostDetail(generics.RetrieveAPIView):\n    permission_classes = [permissions.IsAuthenticated]\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\nclass EditPost(generics.UpdateAPIView):\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = PostSerializer\n    queryset = Post.objects.all()\nclass DeletePost(generics.RetrieveDestroyAPIView):\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "blog_api.views",
        "documentation": {}
    },
    {
        "label": "EditPost",
        "kind": 6,
        "importPath": "blog_api.views",
        "description": "blog_api.views",
        "peekOfCode": "class EditPost(generics.UpdateAPIView):\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = PostSerializer\n    queryset = Post.objects.all()\nclass DeletePost(generics.RetrieveDestroyAPIView):\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = PostSerializer\n    queryset = Post.objects.all()\n\"\"\" Concrete View Classes\n# CreateAPIView",
        "detail": "blog_api.views",
        "documentation": {}
    },
    {
        "label": "DeletePost",
        "kind": 6,
        "importPath": "blog_api.views",
        "description": "blog_api.views",
        "peekOfCode": "class DeletePost(generics.RetrieveDestroyAPIView):\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = PostSerializer\n    queryset = Post.objects.all()\n\"\"\" Concrete View Classes\n# CreateAPIView\nUsed for create-only endpoints.\n# ListAPIView\nUsed for read-only endpoints to represent a collection of model instances.\n# RetrieveAPIView",
        "detail": "blog_api.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.asgi",
        "description": "core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-26z2x-917rpmruup$1@_yrqr*hhs4suxbym#t1*#yuscbmx%w!\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-26z2x-917rpmruup$1@_yrqr*hhs4suxbym#t1*#yuscbmx%w!\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"blog\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"blog\",\n    \"blog_api\",\n    \"users\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "ROOT_URLCONF = \"core.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR, \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR, \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "WSGI_APPLICATION = \"core.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Custom user model",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Custom user model\nAUTH_USER_MODEL = \"users.NewUser\"",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Custom user model\nAUTH_USER_MODEL = \"users.NewUser\"\n# Rest Framework Permissions:",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Custom user model\nAUTH_USER_MODEL = \"users.NewUser\"\n# Rest Framework Permissions:\n# AllowAny\n# IsAuthenticated\n# IsAdminUser",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Custom user model\nAUTH_USER_MODEL = \"users.NewUser\"\n# Rest Framework Permissions:\n# AllowAny\n# IsAuthenticated\n# IsAdminUser\n# IsAuthenticatedOrReadOnly\nREST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"users.NewUser\"\n# Rest Framework Permissions:\n# AllowAny\n# IsAuthenticated\n# IsAdminUser\n# IsAuthenticatedOrReadOnly\nREST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.AllowAny\",\n    ],",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.AllowAny\",\n    ],\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    ),\n    \"DEFAULT_SCHEMA_CLASS\": \"rest_framework.schemas.coreapi.AutoSchema\",\n}\nCORS_ALLOWED_ORIGINS = [\"http://localhost:3000\"]",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\"http://localhost:3000\"]\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=1),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=10),\n    \"ROTATE_REFRESH_TOKENS\": True,\n    \"BLACKLIST_AFTER_ROTATION\": True,\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": SECRET_KEY,\n    \"VERIFYING_KEY\": None,\n    \"AUTH_HEADER_TYPES\": (\"JWT\",),",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=1),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=10),\n    \"ROTATE_REFRESH_TOKENS\": True,\n    \"BLACKLIST_AFTER_ROTATION\": True,\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": SECRET_KEY,\n    \"VERIFYING_KEY\": None,\n    \"AUTH_HEADER_TYPES\": (\"JWT\",),\n    \"USER_ID_FIELD\": \"id\",",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"api/token/\", TokenObtainPairView.as_view(), name=\"token_obtain_pair\"),\n    path(\"api/token/refresh/\", TokenRefreshView.as_view(), name=\"token_refresh\"),\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", include(\"blog_api.urls\", namespace=\"blog_api\")),\n    path(\"api/user/\", include(\"users.urls\", namespace=\"users\")),\n    path(\"api-auth/\", include(\"rest_framework.urls\", namespace=\"rest_framework\")),\n    path(\"\", include(\"blog.urls\", namespace=\"blog\")),\n    path(\"docs/\", include_docs_urls(title=\"BlogAPI\")),\n    path(",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.wsgi",
        "description": "core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0001_initial",
        "description": "users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='NewUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserAdminConfig",
        "kind": 6,
        "importPath": "users.admin",
        "description": "users.admin",
        "peekOfCode": "class UserAdminConfig(UserAdmin):\n    model = NewUser\n    search_fields = (\n        \"email\",\n        \"user_name\",\n        \"first_name\",\n    )\n    list_filter = (\"email\", \"id\", \"user_name\", \"first_name\", \"is_active\", \"is_staff\")\n    ordering = (\"-start_date\",)\n    list_display = (\"email\", \"id\", \"user_name\", \"first_name\", \"is_active\", \"is_staff\")",
        "detail": "users.admin",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "users.apps",
        "description": "users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'",
        "detail": "users.apps",
        "documentation": {}
    },
    {
        "label": "CustomAccountManager",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class CustomAccountManager(BaseUserManager):\n    def create_superuser(self, email, user_name, first_name, password, **other_fields):\n        other_fields.setdefault(\"is_staff\", True)\n        other_fields.setdefault(\"is_superuser\", True)\n        other_fields.setdefault(\"is_active\", True)\n        if other_fields.get(\"is_staff\") is not True:\n            raise ValueError(\"Superuser must be assigned to is_staff=True.\")\n        if other_fields.get(\"is_superuser\") is not True:\n            raise ValueError(\"Superuser must be assigned to is_superuser=True.\")\n        return self.create_user(email, user_name, first_name, password, **other_fields)",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "NewUser",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class NewUser(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(_(\"email address\"), unique=True)\n    user_name = models.CharField(max_length=150, unique=True)\n    first_name = models.CharField(max_length=150, blank=True)\n    start_date = models.DateTimeField(default=timezone.now)\n    about = models.TextField(_(\"about\"), max_length=500, blank=True)\n    is_staff = models.BooleanField(default=False)\n    # to be changed after email service is setup\n    is_active = models.BooleanField(default=True)\n    objects = CustomAccountManager()",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "CustomUserSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class CustomUserSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Currently unused in preference of the below.\n    \"\"\"\n    email = serializers.EmailField(required=True)\n    user_name = serializers.CharField(required=True)\n    password = serializers.CharField(min_length=8, write_only=True)\n    class Meta:\n        model = NewUser\n        fields = (\"email\", \"user_name\", \"password\")",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "users.urls",
        "description": "users.urls",
        "peekOfCode": "app_name = \"users\"\nurlpatterns = [\n    path(\"register/\", CustomUserCreate.as_view(), name=\"create_user\"),\n    path(\"logout/blacklist/\", BlacklistTokenUpdateView.as_view(), name=\"blacklist\"),\n]",
        "detail": "users.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "users.urls",
        "description": "users.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"register/\", CustomUserCreate.as_view(), name=\"create_user\"),\n    path(\"logout/blacklist/\", BlacklistTokenUpdateView.as_view(), name=\"blacklist\"),\n]",
        "detail": "users.urls",
        "documentation": {}
    },
    {
        "label": "CustomUserCreate",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class CustomUserCreate(APIView):\n    permission_classes = [AllowAny]\n    def post(self, request, format=\"json\"):\n        serializer = CustomUserSerializer(data=request.data)\n        if serializer.is_valid():\n            user = serializer.save()\n            if user:\n                json = serializer.data\n                print(\" -------> User created successfully <-------------\")\n                return Response(json, status=status.HTTP_201_CREATED)",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "BlacklistTokenUpdateView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class BlacklistTokenUpdateView(APIView):\n    permission_classes = [AllowAny]\n    authentication_classes = ()\n    def post(self, request):\n        try:\n            refresh_token = request.data[\"refresh_token\"]\n            token = RefreshToken(refresh_token)\n            token.blacklist()\n            return Response(status=status.HTTP_205_RESET_CONTENT)\n        except Exception as e:",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]